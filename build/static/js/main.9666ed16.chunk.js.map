{"version":3,"sources":["QuoteDB.js","components/QuoteAndAuthor.js","App.js","serviceWorker.js","index.js"],"names":["quotes","quote","author","QuoteAndAuthor","props","generateRandomQuote","className","style","textAlign","class","role","onClick","App","state","arr","num","Math","floor","random","length","newQuote","setState","shuffleQuotes","sort","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OA+CeA,EA/CA,CACb,CACEC,MAAO,oCACPC,OAAQ,qBAEV,CACED,MAAO,+BACPC,OAAQ,yBAEV,CACED,MAAO,8CACPC,OAAQ,qBAEV,CACED,MAAO,qBACPC,OAAQ,yBAEV,CACED,MAAO,kEACPC,OAAQ,yBAEV,CACED,MAAO,+BACPC,OAAQ,yBAEV,CACED,MAAO,0BACPC,OAAQ,yBAEV,CACED,MAAO,0CACPC,OAAQ,yBAEV,CACED,MAAO,kDACPC,OAAQ,yBAEV,CACED,MAAO,4CACPC,OAAQ,yBAEV,CACED,MAAO,sDACPC,OAAQ,e,MCvCG,SAASC,EAAeC,GAAQ,IACrCH,EAA+BG,EAA/BH,MAAOI,EAAwBD,EAAxBC,oBACf,OACE,yBAAKC,UAAU,iBACb,wBAAIC,MAAO,CAAEC,UAAW,UAAYF,UAAU,aAC3CL,EAAMA,OAET,wBAAIM,MAAO,CAAEC,UAAW,UAAYF,UAAU,cAA9C,KACKL,EAAMC,QAEX,yBAAKI,UAAU,UACb,4BACEG,MAAM,YACNC,KAAK,SACLC,QAAS,WACPN,EAAoBL,KAGtB,0BAAMS,MAAM,QAAZ,yB,IClBWG,E,4MAEnBC,MAAQ,CACNZ,MAAOD,EAAO,GAAGC,MACjBC,OAAQF,EAAO,GAAGE,Q,EAIpBG,oBAAsB,SAACS,GAErB,IAAIC,EAAMC,KAAKC,MAAMD,KAAKE,SAAWlB,EAAOmB,QAExCC,EAAWpB,EAAOe,GAGtB,EAAKM,SAAS,CACZpB,MAAOmB,EAASnB,MAChBC,OAAQkB,EAASlB,SAGnB,EAAKoB,cAActB,I,EAIrBsB,cAAgB,SAACR,GACf,OAAOA,EAAIS,MAAK,WACd,MAAO,GAAMP,KAAKE,a,uDAKpB,OACE,yBAAKZ,UAAU,aACb,wBAAIA,UAAU,0BAAd,6DAGA,yBAAKA,UAAU,iBACb,kBAACH,EAAD,CACEE,oBAAqBmB,KAAKnB,oBAC1BJ,MAAOuB,KAAKX,c,GAvCSY,aCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9666ed16.chunk.js","sourcesContent":["const quotes = [\n  {\n    quote: \"Det är en överbetygsuppgift\",\n    author: \"Victor Gunnarsson\",\n  },\n  {\n    quote: \"Det kommer inte på tentan\",\n    author: \"Jakob Westergården\",\n  },\n  {\n    quote: \"Jag ska bara göra en ursäktsgenerator\",\n    author: \"Victor Gunnarsson\",\n  },\n  {\n    quote: \"Vi tar det imorgon\",\n    author: \"Jakob Westergården\",\n  },\n  {\n    quote: \"Vi kan inte göra allt idag, vad ska vi göra imorgon då\",\n    author: \"Jakob Westergården\",\n  },\n  {\n    quote: \"Tentan är standardiserad!\",\n    author: \"Jakob Westergården\",\n  },\n  {\n    quote: \"Vi tar det på tentaP\",\n    author: \"Jakob Westergården\",\n  },\n  {\n    quote: \"Vi behöver inte stressa ihjäl oss\",\n    author: \"Jakob Westergården\",\n  },\n  {\n    quote: \"Det får man nog en pinne på tentan för\",\n    author: \"Jakob Westergården\",\n  },\n  {\n    quote: \"Jag har kollat i facit och förstår.\",\n    author: \"Jakob Westergården\",\n  },\n  {\n    quote: \"Ni pluggar i onödan jag kommer klara alla tentor\",\n    author: \"Amin Alian\",\n  },\n];\n\nexport default quotes;\n","import React from \"react\";\nimport quotes from \"../QuoteDB\";\nimport \"./../coolButton.css\"; // Tell webpack that Button.js uses these styles\n\nexport default function QuoteAndAuthor(props) {\n  const { quote, generateRandomQuote } = props;\n  return (\n    <div className=\"bottom-margin\">\n      <h2 style={{ textAlign: \"center\" }} className=\"card-text\">\n        {quote.quote}\n      </h2>\n      <h4 style={{ textAlign: \"center\" }} className=\"card-title\">\n        - {quote.author}\n      </h4>\n      <div className=\"center\">\n        <button\n          class=\"button-64\"\n          role=\"button\"\n          onClick={() => {\n            generateRandomQuote(quotes);\n          }}\n        >\n          <span class=\"text\">Generera ursäkt</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport QuoteAndAuthor from \"./components/QuoteAndAuthor\";\nimport quotes from \"./QuoteDB\";\n\nexport default class App extends Component {\n  //state\n  state = {\n    quote: quotes[0].quote,\n    author: quotes[0].author,\n  };\n\n  //generate diffrent quote function\n  generateRandomQuote = (arr) => {\n    //get random numbers\n    let num = Math.floor(Math.random() * quotes.length);\n\n    let newQuote = quotes[num];\n\n    //update state\n    this.setState({\n      quote: newQuote.quote,\n      author: newQuote.author,\n    });\n\n    this.shuffleQuotes(quotes);\n  };\n\n  //shuufle quotes function\n  shuffleQuotes = (arr) => {\n    return arr.sort(function () {\n      return 0.5 - Math.random();\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"text-center mainheader\">\n          B00leanBoisen bästa ursäkter för att inte plugga\n        </h1>\n        <div className=\"center-screen\">\n          <QuoteAndAuthor\n            generateRandomQuote={this.generateRandomQuote}\n            quote={this.state}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}